# -*- coding: utf-8 -*-
"""POO_Herencia.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cdyFdteJePyTqXqF-pRlVdEaB4MZQVNS
"""

'''Encapsulamiento de todos las atributos de mi clase'''
class Persona:
  def __init__(self, nombre, apellido, edad):
    self._nombre=nombre #Se le agrega un guión bajo para decir que lo encapsule
    self._apellido=apellido
    self._edad=edad

  #Un decorador modifica el comportamiento de nuestro método
  #Método GET
  @property #Permite acceder al método como si llamara al atributo
  def nombre(self):
    print('Llamando método GET nombre')
    return self._nombre

  #Método SET
  @nombre.setter #Decorador para poder modificar el atributo del nombre
  def nombre(self, nombre):
    print('Llamando método SET nombre')
    self._nombre=nombre

  #Metodo GET
  @property
  def apellido(self):
    print("Llamando método GET apellido")
    return self._apellido

  #Método SET
  @apellido.setter
  def apellido(self, apellido):
    print("LLamando método SET apellido")
    self._apellido=apellido

  #Método GET
  @property
  def edad(self):
    print("Llamando método GET edad")
    return self._edad

  #Método SET
  @edad.setter
  def edad(self, edad):
    print("Llamando método SET edad")
    self._edad=edad

  def mostrar_detalle(self):
    print(f'Persona: {self._nombre}, {self._apellido} {self._edad}')

  def __str__(self): #Permitirá imprimir todos los detalles de un objeto de esta clase haciendo print(persona1)
    return f'Persona: {self._nombre} {self._apellido} {self._edad}'

  def __del__(self):
    print(f'Persona: {self._nombre} {self._apellido} eliminado')

persona1=Persona('José', 'Olmedo', 23)
persona1.nombre='Marco Isaac'#Así podemos modificar el atributo "nombre" empleando un método que permite acceder al atributo
print('\n')

persona1.apellido='Olmedo Guevara'
persona1.edad=30
persona1.mostrar_detalle()

#Generación de una clase 'hija'
'''Todas las clases hasta que se especifique lo contrario heredan de la clase 'object'
por ejemplo podemos o no poner esto: class Persona(object)'''

'''super(). es un método que me permite acceder a los atributos de la clase padre'''

class Empleado(Persona):

  def __init__(self,nombre, apellido, edad, sueldo):

    super().__init__(nombre, apellido, edad)
    self._sueldo=sueldo

  @property
  def sueldo(self):
    print("Llamando método GET sueldo")
    return self._sueldo

  @sueldo.setter
  def sueldo(self, sueldo):
    print("Llamando método SET sueldo")
    self._sueldo=sueldo

  def __str__(self):
    return f'Empleado: {super().__str__()} Sueldo: {self._sueldo}'


empleado1=Empleado('José','Olmedo', 23, 50000)
print(empleado1.nombre)
print(empleado1.apellido)
print(empleado1.edad)
print(empleado1.sueldo)

print(persona1) #Esto es posible gracias a la sobreescritura del método __str__
print(empleado1) #Se hereda de la clase Persona

"""Ejercicio de generar una clase vehículo y dos clases hijas.

"""

class Vehiculo:

  def __init__(self, color, ruedas):
    self._color=color
    self._ruedas=ruedas

  def __str__(self): #Notese que al llamar a un objeto de esta clase con print(), __str__ hace acto de presencia
    return f'Color: {self._color}, Ruedas: {self._ruedas}'


class Coche(Vehiculo):

  def __init__(self,color, ruedas, velocidad): #Inicializar objeto con TODOS esos atributos
    super().__init__(color, ruedas) #Solo los atributos que hereda
    self._velocidad=velocidad

  def __str__(self): #Notese que al llamar a un objeto de esta clase con print(), __str__ hace acto de presencia
    return f'Coche de {super().__str__()}, Velocidad: {self._velocidad} km/h'

class Bicicleta(Vehiculo):

  def __init__(self, color, ruedas, tipo): #Inicializar objeto con TODOS esos atributos
    super().__init__(color, ruedas) #Solo los atributos que hereda
    self._tipo=tipo

  def __str__(self): #Notese que al llamar a un objeto de esta clase con print(), __str__ hace acto de presencia
    return f'Bicicleta de {super().__str__()}, de tipo: {self._tipo}'


vehiculo1=Vehiculo('Verde',3)
coche1=Coche('Azul', 4, 200)
bicicleta1=Bicicleta('Rojo', 2, 'Montaña')

print(vehiculo1)
print(coche1)
print(bicicleta1)

