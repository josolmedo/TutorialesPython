# -*- coding: utf-8 -*-
"""POO_ClasesAbstractas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cdyFdteJePyTqXqF-pRlVdEaB4MZQVNS

Un método abstracto en una clase padre obliga a las clases hijas a implementar este futuro método, lo malo es que no podremos crear objetos de esa clase padre o instanciar.
"""

#ABC= Abstract Base Class
from abc import ABC, abstractmethod

class FiguraGeometrica(ABC):

  def __init__(self, ancho, alto):
    if self._validar_valor(ancho):
      self._ancho=ancho
    else:
      print("Ingresaste un valor negativo, se trabajará con un valor 0")
      self._ancho=0
    if self._validar_valor(alto):
      self._alto=alto
    else:
      print("Ingresaste un valor negativo, se trabajará con un valor 0")
      self._alto=0

  @property #Método GET
  def ancho(self):
    print("Llamando método GET ancho")
    return self._ancho

  @ancho.setter #Método SET
  def ancho(self, ancho):
    print("Llamando método SET ancho")
    self._ancho=ancho

  @property #Método GET
  def alto(self):
    print("Llamando método GET alto")
    return self._alto

  @alto.setter #Método SET
  def alto(self, alto):
    print("Llamando método SET alto")
    self._alto=alto

  def _validar_valor(self,valor): #Este método es interno, para evitar que se ingresen números negativos
    return True if valor>0 else False

  def __str__(self):
    return f'Figura geométrica de ancho: {self._ancho} y alto de: {self._alto} unidades'

class Color(object):

  def __init__(self, color):
    self._color=color

  @property #Método GET
  def color(self):
    print("Llamando al metodo GET color")
    return self._color

  @color.setter #Método SET
  def color(self, color):
    print('Llamando al método SET color')
    self._color=color

  def __str__(self):
    return f'Color {self._color}'

  @abstractmethod
  def calcular_area(self):
    pass

class Cuadrado(FiguraGeometrica, Color):

  def __init__(self, lado, color):
    self._lado=lado
    self._color=color
    # super().__init__(color) Cuando es herencia múltiple, hay que evitar esta sintaxis
    FiguraGeometrica.__init__(self, lado, lado) #Así ya inicializamos los atributos de la clase padre
    Color.__init__(self, color) #Inicializamos la segunda clase padre.

  def calcular_area(self):
    area=self._ancho*self._alto #Accedemos a los atributos de la clase padre FiguraGeometrica
    return f'El área es de: {area}' #Imprimimos el área

  @property #Método GET
  def lado(self):
    print("Llamando al método GET lado")
    return self._lado

  @lado.setter #Método SET
  def lado(self, lado):
    print('Llamando al método SET lado')
    self._lado=lado

  @property #Método GET
  def color(self):
    print("Llamando al método GET color")
    return self._color

  @lado.setter #Método SET
  def color(self, color):
    print('Llamando al método SET color')
    self._color=color

  def __str__(self):
    return f'Cuadrado de lado de {self._lado} unidades y de color {self._color}'

class Rectangulo(FiguraGeometrica, Color):

  def __init__(self, alto, ancho, color):
    self._ancho=ancho
    self._alto=alto
    self._color=color
    FiguraGeometrica.__init__(self, ancho, alto) #Así ya inicializamos los atributos de la clase padre
    Color.__init__(self, color) #Inicializamos la segunda clase padre.

  @property #Método GET
  def ancho(self):
    print("Llamando método GET ancho")
    return self._ancho

  @ancho.setter #Método SET
  def ancho(self, ancho):
    print("Llamando método SET ancho")
    self._ancho=ancho

  @property #Método GET
  def alto(self):
    print("Llamando método GET alto")
    return self._alto

  @alto.setter #Método SET
  def alto(self, alto):
    print("Llamando método SET alto")
    self._alto=alto

  def calcular_area(self):
    area=self._ancho*self._alto
    self._area=area
    return f'Área de: {self._area} unidades cuadradas' #Imprimimos el área.

  def __str__(self):
    return f'Rectangulo de ancho {self._ancho} y de alto {self._alto} unidades con color {self._color}'

cuadrado1=Cuadrado(23,'Azul')
rectangulo1=Rectangulo(5,6,'Verde')
print(cuadrado1)
print(rectangulo1)
print(cuadrado1.ancho)
print(cuadrado1.lado)
print(rectangulo1.alto)
print(rectangulo1.color)
print('\n')
print(cuadrado1.calcular_area())
print(rectangulo1.calcular_area())

print(Cuadrado.mro())