# -*- coding: utf-8 -*-
"""POO_Básico_Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DNjyQYA1y9k3qzxgiL5c_GrGuXQcPfHn
"""

#POO Python
#Una clase es una "Plantilla" que posee atributos y métodos
class Wilson: #Creamos una clase
  pass  #No se va a procesar nada más y se creará este tipo de dato.

print(type(Wilson))  #Imprimirá que es un tipo clase

"""Para agregar características o atributos en una clase
se emplea el método 'init' (inicializador)
El parámetro self es una referencia al objeto en si mismo
"""
class Persona:  #Definimos clase persona, con varios atributos.
  def __init__(self):
    self.nombre='José'
    self.apellido='Olmedo'
    self.edad=22

persona1=Persona() #Creamos un objeto y se manda a llamar el método __init__
print(persona1.nombre)
print(persona1.apellido)
print(persona1.edad)

class Persona:  #Definimos clase persona, con varios atributos.
  def __init__(self, nombre, apellido, edad):
    self.nombre=nombre #Lado derecho son parametros, lado izquierdo es el atributo de nuestra clase
    self.apellido=apellido
    self.edad=edad

persona1=Persona('José','Olmedo',22) #Creamos un objeto y se manda a llamar el método __init__
print(f'Objeto Persona 1: {persona1.nombre} {persona1.apellido} {persona1.edad}')
"""print(persona1.nombre)
print(persona1.apellido)
print(persona1.edad)   """

persona2=Persona('Marco', 'Olmedo', 17)
print(f'Objeto Persona 2: {persona2.nombre} {persona2.apellido} {persona2.edad}')

#Modificar atributos de un objeto
persona1.nombre='Isaac'
persona1.apellido='Campos'
persona1.edad=52
print(f'Objeto Persona 1: {persona1.nombre} {persona1.apellido} {persona1.edad}')

#Agregar atributos a un objeto que no se establecieron en una clase
persona1.telefono='123456789'
print(persona1.telefono)

'''Aquí mandaría un error porque el objeto persona2 no tiene
teléfono:

print(persona2.telefono)'''

#Creación de métodos (Acciones que puede realizar un objeto)

class Perro:
  def __init__(self, nombre, raza):
    self.nombre=nombre  #Atributo nombre
    self.raza=raza     #Atributo raza

  def ladrar(self):   #Método ladrar
    print("¡Guau!")

  def saludar(self):  #Método saludar
    print("¡Hola, soy un perro llamado", self.nombre, "de raza", self.raza,"!")

mi_perro=Perro("Wilson", "Beagle")
mi_perro.ladrar()
mi_perro.saludar()
print('\n')

#Otra forma de mostrar detalles
Perro.ladrar(mi_perro)
Perro.saludar(mi_perro)

class autos:
  def __init__(self, marca, velocidadMaxima, color, fechaDeFabricacion):
    self.marca=marca
    self.velocidadMaxima=velocidadMaxima
    self.color=color
    self.fechaDeFabricacion=fechaDeFabricacion

  def acelerar(self):
    print("Estoy acelerando")

  def frenar(self):
    print("Estoy frenando")

  def reporte(self):
    print("Soy un auto marca: ", self.marca, "con una velocidad máxima de: ", self.velocidadMaxima, "y un color: ", self.color)

mi_auto=autos("Lamborgini", 200, "Azul", 2024)
auto_padre=autos("Ferrari",190,"Rojo", 2023)
mi_auto.acelerar()
mi_auto.frenar()
mi_auto.reporte()

print('\n')
auto_padre.acelerar()
auto_padre.frenar()
auto_padre.reporte()

'''Ejercicio de artimética'''
class Aritmetica:

  def __init__(self,operandoA,operandoB):
    self.operandoA=operandoA
    self.operandoB=operandoB

  def sumar(self):
    resultado=self.operandoA+self.operandoB
    print(f"El resultado de sumar {self.operandoA}+{self.operandoB} es: {resultado}")

  def restar(self):
    resultado=self.operandoA-self.operandoB
    print(f"El resultado de restar {self.operandoA}-{self.operandoB} es: {resultado}")

  def multiplicar(self):
    resultado=self.operandoA*self.operandoB
    print(f"El resultado de multiplicar {self.operandoA}*{self.operandoB} es: {resultado}")

  def dividir(self):
    resultado=self.operandoA/self.operandoB
    print(f"El resultado de dividir {self.operandoA}/{self.operandoB} es: {resultado}")


operacion=Aritmetica(23,18)

operacion.sumar()
operacion.restar()
operacion.multiplicar()
operacion.dividir()

'''Ejercicio area y perimetro de un rectangulo'''

class PerimetroyArea:
  def __init__(self, a, b):
    self.a=a
    self.b=b

  def perimetro(self):
    return ((2*self.a)+(2*self.b))

  def area(self):
    return (self.b)*(self.a)

print('Este script calcula el perímetro y área de un rectangulo \n')
Base=float(input('Ingresa la longitud de la base: '))
Altura=float(input('Ingresa la longitud de la altura: '))
rectangulo=PerimetroyArea(Base,Altura)

print(f'\nEl perimetro es de {rectangulo.perimetro()} unidades.')
print(f'El área es de {rectangulo.area()} unidades cuadradas.')

'''Ejercicio volumen, perimetro y area de un cubo'''

class Cubo:
  def __init__(self, lado):
    self.lado=lado

  def perimetro(self):
    return self.lado*12

  def area(self):
    return self.lado*self.lado*6

  def volumen(self):
    return self.lado*self.lado*self.lado

print('\nEste script da el area, perimetro y volumen de un cubo')
arista=float(input('Ingresa la longitud de una arista: '))
cubo1=Cubo(arista)
print(f'\nEl perímetro es de {cubo1.perimetro()} unidades.')
print(f'El área es de {cubo1.area()} unidades cuadradas.')
print(f'El volumen es de {cubo1.volumen()} unidades cúbicas.')

'''Robustecimiento del método __init__'''
class Persona:  #Definimos clase persona, con varios atributos.
  def __init__(self, nombre, apellido, edad, *args, **kwargs):
    self.nombre=nombre
    self.apellido=apellido
    self.edad=edad
    self.args=args
    self.kwargs=kwargs

  def mostrar_detalle(self):
    print(f'Persona: {self.nombre}, {self.apellido} {self.edad} {self.args} {self.kwargs}')

persona1=Persona('José', 'Olmedo', 23, '5560858564', 4, 5, 6, m='manzana', p='pera')
persona1.mostrar_detalle()